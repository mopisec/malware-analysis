import idautils, ida_bytes, idc, time

# List of mnemonic used in obfuscated code
JMP_MNEM_LIST = ['jns', 'js', 'jbe', 'ja', 'jno', 'jo', 'jnp', 'jp', 'jge', 'jl', 'jnz', 'jz', 'jnb', 'jb', 'jle', 'jg']

# Address of start of obfuscated code (can be 0, but needs a lot of time)
START_EA = 0x9740E8
END_EA = 0x9747B0

def main():
    if END_EA != 0:
        end_ea = END_EA
    else:
        for segment in idautils.Segments():
            end_ea = idc.get_segm_end(segment)
    
    ea = START_EA
    while ea != idc.BADADDR:
        disas = idc.generate_disasm_line(ea, 0)
        mnem = idc.print_insn_mnem(ea)
        if mnem in JMP_MNEM_LIST and disas[-2:] == '+1':
            print('[*] Broken jump instruction found at', hex(ea))
            code_addr = idc.get_operand_value(ea, 0)
            if ida_bytes.del_items(code_addr - 1, 0, end_ea - code_addr) and idc.create_insn(code_addr) != 0:
                print('[+] Successfully repaired!')
            else:
                print('[-] Failed to repair')
        idc.plan_and_wait(START_EA, end_ea)
        ea = idc.next_head(ea)

if __name__ == '__main__':
    main()
