import idaapi, idautils

# TODO: Obtain the address of decryption function automatically
DECRYPT_FUNC_ADDR = 0x972E7A

# TODO: Obtain the key automatically
XOR_KEY = 0x3F

def main():
    counter = 0

    for ref in idautils.XrefsTo(DECRYPT_FUNC_ADDR):
        ea = ref.frm

        # Obtain encrypted string
        encrypted_string = ''
        while ea != idc.BADADDR:
            ea = idc.prev_head(ea)
            if idc.print_insn_mnem(ea) == 'push':
                str_addr = idc.get_operand_value(ea, 0)
                str_char = 0
                while str_char != XOR_KEY:
                    str_char = idaapi.get_byte(str_addr)
                    encrypted_string += chr(str_char)
                    str_addr += 1 
                break
        
        if len(encrypted_string) == 0:
            print('[-] String not found', ref.frm)
            continue
        
        # XOR decryption using hardcoded key
        decrypted_string = ''
        for char in encrypted_string:
            decrypted_string += chr(ord(char) ^ XOR_KEY)
        
        # Output result
        print('[*] Decrypted', decrypted_string, 'at', hex(ref.frm))

        # Set comment with decrypted string at instruction calling decryption function
        idc.set_cmt(ref.frm, 'Decrypted: ' + decrypted_string, False)
        counter += 1
    
    print('[+] Decrypted', counter, 'strings')

if __name__ == '__main__':
    main()
