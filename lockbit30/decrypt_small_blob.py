from base64 import b64decode

import ida_bytes, idautils, idc

def generate_keystream(blob_seed, length):
    result = b''
    seed = blob_seed
    for i in range(length):
        seed = ((seed * 0x5851F42D4C957F2D) + 0x14057B7EF767814F) & 0xFFFFFFFFFFFFFFFF
        result += struct.pack('<Q', (seed * blob_seed) & 0xFFFFFFFFFFFFFFFF)
    return result

def process_small_blob(blob_seed, blob_data):
    blob_size = len(blob_data)
    keystream = generate_keystream(blob_seed, blob_size)
    
    decrypted_data = b''
    encrypted_data = blob_data

    padding_size = 8 - (blob_size % 8)
    encrypted_data += b'\x00' * padding_size

    for i in range(0, blob_size, 8):
        decrypted_data += (encrypted_data[i  ] ^ keystream[i  ]).to_bytes(1, 'little')
        decrypted_data += (encrypted_data[i+1] ^ keystream[i+5]).to_bytes(1, 'little')
        decrypted_data += (encrypted_data[i+2] ^ keystream[i+1]).to_bytes(1, 'little')
        decrypted_data += (encrypted_data[i+3] ^ keystream[i+4]).to_bytes(1, 'little')
        decrypted_data += (encrypted_data[i+4] ^ keystream[i+2]).to_bytes(1, 'little')
        decrypted_data += (encrypted_data[i+5] ^ keystream[i+7]).to_bytes(1, 'little')
        decrypted_data += (encrypted_data[i+6] ^ keystream[i+3]).to_bytes(1, 'little')
        decrypted_data += (encrypted_data[i+7] ^ keystream[i+6]).to_bytes(1, 'little')
    
    decrypted_data = decrypted_data[:-padding_size]

    return decrypted_data

def main():
    dec_data = process_blob(0xe38f4742c189c399, 0x426000+4*3, True)
    decoded = b64decode(dec_data[0x67D:-1])
    decrypted = process_small_blob(0xe38f4742c189c399, decoded)
    print(decrypted)

if __name__ == '__main__':
    main()