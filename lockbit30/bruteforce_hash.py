from itertools import product, count
from string import printable

# Hashes found at sub_417458
HASHES = [0x45471D17, 0x459F1CD7, 0x452F4997, 0x45678B17, 0x69268C17, 0x69C71957, 0xCB62E940, 0x4B668957]

# ref: https://gist.github.com/trietptm/5cd60ed6add5adad6a34098ce255949a#file-rol-ror-py-L13
ror = lambda val, r_bits, max_bits: \
    ((val & (2**max_bits-1)) >> r_bits%max_bits) | \
    (val << (max_bits-(r_bits%max_bits)) & (2**max_bits-1))

# https://codereview.stackexchange.com/questions/187830/brute-force-hash-cracker
def arguments(encoding):
    chars = [c.encode(encoding) for c in printable]
    for length in count(start=1):
        for arg in product(chars, repeat=length):
            yield b''.join(arg)

def hash_dll(data, hash_value):
    for char in data:
        if char >= 0x41 and char <= 0x5A:
            char |= 0x20
        hash_value = (char + ror(hash_value, 13, 32)) & 0xFFFFFFFF
    return hash_value

def crack_hash(search_hash):
    for arg in arguments('utf-8'):
        arg = arg + b'\x00'
        if hash_dll(arg, 0) == search_hash:
            return arg.decode('utf-8')\

def main():
    for search_hash in HASHES:
        print('[*] Attacking hash', hex(search_hash))
        original = crack_hash(search_hash)
        print('[+] Original value of hash', hex(search_hash), 'is', original)

if __name__ == '__main__':
    main()