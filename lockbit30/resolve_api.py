import idautils, idc, json
import re

'''
.text:00405B3D 0F EF C0                          pxor    mm0, mm0
.text:00405B40 0F EF C9                          pxor    mm1, mm1
.text:00405B43 33 C0                             xor     eax, eax
.text:00405B45 40                                inc     eax
.text:00405B46 C1 E0 05                          shl     eax, 5
'''
RESOLVER_FUNC_PATTERN = rb'\x0F\xEF\xC0\x0F\xEF\xC9\x33\xC0\x40\xC1\xE0.'

def obtain_resolver_argument(call_ea):
    ea = call_ea
    mov_val = 0
    search_depth = 0
    xor_val = 0

    while search_depth != 10:
        ea = idc.prev_head(ea)
        search_depth += 1

        if idc.print_insn_mnem(ea) == 'mov' and \
           idc.get_operand_value(ea, 0) == 0 and \
           idc.get_operand_type(ea, 1) == idc.o_imm:
            mov_val = get_operand_value(ea, 1) & 0xFFFFFFFF
        
        if idc.print_insn_mnem(ea) == 'xor' and \
           idc.get_operand_value(ea, 0) == 0 and \
           idc.get_operand_type(ea, 1) == idc.o_imm:
            xor_val = get_operand_value(ea, 1) & 0xFFFFFFFF
    
    if mov_val == 0 or xor_val == 0:
        return 0
    
    return mov_val ^ xor_val

def search_function(patt):
    result: list[int] = []

    for segment in idautils.Segments():
        segment_name = idc.get_segm_name(segment)
        segment_start_ea = idc.get_segm_start(segment)
        segment_end_ea = idc.get_segm_end(segment)
        segment_size = segment_end_ea - segment_start_ea
        segment_data = idc.get_bytes(segment_start_ea, segment_size)
        search_result = re.finditer(patt, segment_data)

        for matched in search_result:
            func_ea = ida_funcs.get_func(segment_start_ea + matched.start()).start_ea
            result.append(func_ea)
        
    return result

def main():
    with open('C:\\Users\\gcc\\Downloads\\z2a_lockbit\\api_hash_dict.json', 'r') as input_file:
        api_hash_dict = json.load(input_file)

    search_result = search_function(RESOLVER_FUNC_PATTERN)
    if len(search_result) != 1:
        print('[-] More than one API resolver function found. Please fix the search pattern.')
        return
    resolver_func_ea = search_result[0]

    for ref in idautils.XrefsTo(resolver_func_ea):
        hash_value = obtain_resolver_argument(ref.frm)
        if hash_value == 0:
            print('[-] Failed to obtain argument of resolver called from ' + hex(ref.frm))
            continue
        resolved_api_name = api_hash_dict[str(hash_value)]
        print('[+] Resolved ' + resolved_api_name + ' at ' + hex(ref.frm))
        idc.set_cmt(ref.frm, resolved_api_name, False)

if __name__ == '__main__':
    main()