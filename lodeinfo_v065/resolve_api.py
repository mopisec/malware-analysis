import glob, idautils, idc, pefile

# Address of API resolver function
API_RESOLVER_ADDR = 0xD355

# Directory of DLLs to calculate and compare hash with hardcoded value
DLL_SEARCH_DIR = b'C:\\Windows\\SysWOW64\\'

# Maximum time to loop in obtain_resolver_argument function
MAX_SEARCH = 0x10

def build_api_hash_dict(dll_path: str) -> dict[bytes, int]:
    result = {}
    pe = pefile.PE(dll_path)
    api_list = [e.name for e in pe.DIRECTORY_ENTRY_EXPORT.symbols]
    for api_name in api_list:
        if api_name != None:
            result[api_name] = calc_hash(api_name)
    return result

def build_dll_hash_dict(dll_path_list: list[bytes]) -> dict[bytes, int]:
    result = {}
    for dll_path in dll_path_list:
        result[dll_path[20:]] = calc_hash(dll_path[20:])
    return result

def calc_hash(target: bytes) -> int:
    i = 0x4E67C6A7
    for char in target:
        j = char + 0x20
        k = char - 0x41
        if k < 0:
            k += 2**32
        if k > 0x19:
            j = char
        if j == 0:
            break
        i = (((i << 5) & 0xFFFFFFFF) ^ ((i >> 0x1B) & 0xFFFFFFFF) ^ j)
    hash_value = i ^ 0x821A
    return hash_value

def obtain_resolver_argument(call_addr: int) -> tuple[int, int]:
    ea = idc.prev_head(call_addr)
    api_hash = 0
    dll_hash = 0
    search_count = 0
    while search_count != MAX_SEARCH:
        if idc.print_insn_mnem(ea) == 'mov' and idc.print_operand(ea, 0) == 'ecx' and idc.get_operand_type(ea, 1) == o_imm:
            if dll_hash == 0:
                dll_hash = idc.get_operand_value(ea, 1) & 0xFFFFFFFF
        if idc.print_insn_mnem(ea) == 'mov' and idc.print_operand(ea, 0) == 'edx' and idc.get_operand_type(ea, 1) == o_imm:
            if api_hash == 0:
                api_hash = idc.get_operand_value(ea, 1) & 0xFFFFFFFF
        if dll_hash != 0 and api_hash != 0:
            break
        ea = idc.prev_head(ea)
        search_count += 1
    return dll_hash, api_hash

def main():
    dll_path_list = [p for p in glob.glob(DLL_SEARCH_DIR + b'*.dll')]
    dll_hash_dict = build_dll_hash_dict(dll_path_list)
    for ref in idautils.XrefsTo(API_RESOLVER_ADDR):
        dll_hash, api_hash = obtain_resolver_argument(ref.frm)
        dll_name = list(dll_hash_dict.keys())[list(dll_hash_dict.values()).index(dll_hash)]
        api_hash_dict = build_api_hash_dict(DLL_SEARCH_DIR + dll_name)
        api_name = list(api_hash_dict.keys())[list(api_hash_dict.values()).index(api_hash)]
        comment = f'{api_name.decode()} (from {dll_name.decode()})'
        idc.set_cmt(ref.frm, comment, False)

if __name__ == '__main__':
    main()
